#!/usr/bin/env python

"""
ftpd
~~~~
Setup an FTP server using "pyftpdlib".
The script is released under the terms of ISC license.

License:
Copyright (c) 2015-2018, Farzad Ghanei https://www.ghanei.net

Permission to use, copy, modify, and/or distribute this software for any purpose
with or without fee is hereby granted, provided that the above copyright notice
and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
"""

from __future__ import print_function

import sys
import os
import logging
import logging.handlers
import getpass
import getopt

try:
    import pyftpdlib
except ImportError as exp:
    print("pyftpdlib is not available", file = sys.stderr)
    sys.exit(getattr(os, 'EX_UNAVAILABLE', 69))

from pyftpdlib.authorizers import DummyAuthorizer
from pyftpdlib.handlers import FTPHandler
from pyftpdlib.servers import ThreadedFTPServer, FTPServer

pyftpdlib_version = getattr(pyftpdlib, '__ver__', '<unknown>')

class FtpdApp(object):
    __version__ = '0.1.0'

    def __init__(self, opts, args=[]):
        self.opts = self.normalize_opts(opts)
        self.args = args

    @staticmethod
    def get_usage():
        return '''FTP server using pyftpdlib version {0}
Usage:
{1} [options]

Options:
   -h, --help           show this help
   -q, --quiet          less output (overwrites verbose)
   -v, --verbose        more output
   -l, --log            log to a file
   -d, --dir            root directory (default is .)
   -u, --user           username for auth
   -w, --password       password for auth
   -a, --anonymous      enable anonymous access
   -b, --bind           bind to interface (default is 127.0.0.1)
   -p, --port           port to listen (default is 2121)
   --syslog             log to syslog
   --anonymous-write    grant write permissions to anonymous
   --max-connections    limit maximum connections (default is 100)
   --async              use asynchronous IO server model
'''.format(pyftpdlib_version, sys.argv[0])

    @staticmethod
    def get_short_opts():
        return {
            'h' : 'help',
            'q' : 'quiet',
            'v' : 'verbose',
            'l:' : 'log',
            'd:' : 'dir',
            'u:' : 'user',
            'w:' : 'password',
            'a' : 'anonymous',
            'b:' : 'bind',
            'p:' : 'port'
        }

    @staticmethod
    def get_long_opts():
        return [
            'help',
            'quiet',
            'verbose',
            'log=',
            'dir=',
            'user=',
            'password=',
            'anonymous',
            'bind=',
            'port=',
            'syslog',
            'anonymous-write',
            'max-connections=',
            'async'
        ]

    def normalize_opts(self, opts):
        opts = dict(opts)

        short_opts = self.get_short_opts()
        opts_mapping = dict()
        for (key, val) in list(short_opts.items()):
            if key.endswith(':'):
                key = key[:-1]
            opts_mapping[key] = val

        normalized = dict()

        # cleanup getopt helper chars
        for (key, val) in list(opts.items()):
            if key.startswith('--'):
                key = key[2:]
            elif key.startswith('-'):
                key = key[1:]

            if key[-1] in (':', '='):
                key = key[:-1]
            normalized[key] = val

        # convert short opts to long opts
        for key in normalized.keys():
            long_opt = opts_mapping.get(key, None)
            if long_opt:
                if not opts.has_key(long_opt):
                    normalized[long_opt] = normalized[key]

        return normalized

    def get_logger(self):
        return logging.getLogger('pyftpdlib')

    def config_logger(self, logger, quiet = False, verbose = False, filename = None, syslog = False):
        if quiet:
            logger.setLevel(logging.ERROR)
        elif verbose:
            logger.setLevel(logging.DEBUG)

        for handler in logger.handlers:
            if quiet:
                logger.removeHandler(handler)
            else:
                handler.setLevel( verbose and logging.DEBUG or logging.INFO )

        if filename:
            handler = logging.FileHandler(filename)
            handler.setLevel( verbose and logging.DEBUG or logging.INFO )
            logger.addHandler(handler)

        if syslog:
            handler = logging.handlers.SysLogHandler()
            handler.setLevel( verbose and logging.DEBUG or logging.INFO )
            logger.addHandler(handler)
        return logger

    def create_server(
            self,
            directory, user, password,
            anon = False,
            bind = '127.0.0.1', port = 21,
            anon_write = False,
            max_cons = 100,
            server_class = ThreadedFTPServer
        ):
        '''Creates an FTP server configured with the specified args.

        :returns: FTPServer
        :raises: ValueError on missing user/password if anonymous access is disabled
        '''
        authorizer = DummyAuthorizer()

        if anon:
            authorizer.add_anonymous(directory, perm = anon_write and 'elradfmw' or 'elr')
        else:
            if not user:
                raise ValueError('User is required')
            if not password:
                raise ValueError('Password is required')

        if user and password:
            authorizer.add_user(user, password, directory, perm='elradfmw')

        handler = FTPHandler
        handler.authorizer = authorizer

        server = server_class((bind, port), handler)
        server.max_cons = max_cons
        return server

    def run(self):
        opts = self.opts
        if opts.has_key('help'):
            print(self.get_usage())
            return getattr(os, 'EX_OK', 0)

        user = opts.get('user', getpass.getuser())
        password = opts.get('password')
        anon = opts.has_key('anonymous')
        directory = opts.get('dir', os.getcwd())
        bind = opts.get('bind', '127.0.0.1')
        port = opts.get('port', 2121)
        anon_write = opts.has_key('anonymous-write')
        max_cons = opts.get('max-connections', 100)
        verbose = opts.has_key('verbose')
        quiet = opts.has_key('quiet')
        log_filename = opts.get('log', None)
        log_syslog = opts.has_key('syslog')
        async = opts.has_key('async')

        if log_filename and not os.path.exists(os.path.dirname(log_filename)):
            raise ValueError("invalid log file name. containing directory does not exist")

        self.config_logger(self.get_logger(), quiet, verbose, log_filename, log_syslog)

        if not anon:
            while not password:
                password = getpass.getpass('Password for {0}: '.format(user))

        server_class = async and FTPServer or ThreadedFTPServer
        server = self.create_server(directory, user, password, anon, bind, port, anon_write, max_cons, server_class)
        server.serve_forever()
        return(getattr(os, 'EX_OK', 0))

def main(args):
    '''Start an FTP server configured with the specified args.

    :returns: int exit code
    '''
    try:
        opts, _ = getopt.getopt(
                args,
                ''.join(FtpdApp.get_short_opts().keys()),
                FtpdApp.get_long_opts()
        )
    except getopt.GetoptError as exp:
        print(str(exp), file=sys.stderr)
        return getattr(os, 'EX_DATAERR', 65)

    app = FtpdApp(opts)
    try:
        return app.run()
    except KeyboardInterrupt as exp:
        return(getattr(os, 'EX_DATAERR', 65))
    except ValueError as exp:
        print(str(exp), file = sys.stderr)
        return(getattr(os, 'EX_DATAERR', 65))

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
