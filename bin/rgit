#!/usr/bin/env python3
"""
rgit
----
Simple utility to call Git commands on repos found in a root path.

This script is released under the terms of ISC license.

License:
Copyright (c) 2016 Farzad Ghanei (https://www.ghanei.net)

Permission to use, copy, modify, and/or distribute this software for any purpose
with or without fee is hereby granted, provided that the above copyright notice
and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
"""
import sys
import os
import subprocess
from argparse import ArgumentParser

__version__ = "2.0.0"


class App(object):
    def __init__(self, args):
        self.args = self.parse_args(args)
        self.stdout = sys.stdout
        self.stderr = sys.stderr

    def parse_args(self, args):
        parser = ArgumentParser(
            description="Run Git commands on all repos in the root path"
        )
        parser.add_argument(
            "-c",
            "--confirm",
            help="confirm operation on each repo",
            action="store_true",
            default=False,
        )
        parser.add_argument(
            "--verbose", help="be more verbose", action="store_true", default=False
        )
        parser.add_argument("root", help="root path that contains git repos")
        parser.add_argument("gitargs", nargs="+", help="Git command to run")
        return parser.parse_args(args)

    def run(self):
        # I'm lazy to type, Python's lazy to run
        path = os.path
        call = subprocess.call
        verbose = self._verbose
        confirm = self._confirm_if_should

        if not self.args.root:
            raise ValueError("Root path is not specified")
        root_path = path.abspath(self.args.root)

        if not self.args.gitargs:
            raise ValueError("Git arguments are not specified")
        git_command = "git " + " ".join(self.args.gitargs)

        verbose("going to run: " + git_command)
        if not confirm('shall I run: "{}"'.format(git_command)):
            return 1

        for item in os.listdir(root_path):
            try:
                item_path = path.join(root_path, item)
                if path.isdir(item_path):
                    verbose("checking directory {} ...".format(item_path))
                    if path.isdir(path.join(item_path, ".git")):
                        if not confirm(
                            "execute in repo '{}' ({})".format(item, item_path),
                            quit=True,
                        ):
                            continue
                        verbose("calling {} in repo {} ...".format(git_command, item))
                        call(git_command, shell=True, cwd=item_path)
                else:
                    verbose("skipping none repo item '{}'".format(item_path))
                    continue
            except StopIteration:
                return 1
        return 0

    def _verbose(self, msg):
        if self.args.verbose:
            print(msg, file=self.stdout)

    def _confirm_if_should(self, msg, quit=False):
        if not self.args.confirm:
            return True
        if quit:
            ans = input(msg + " [N/y/q]? ").strip().lower()
            if ans in ("q", "quit"):
                raise StopIteration
        else:
            ans = input(msg + " [N/y]? ").strip().lower()
        return ans in ("y", "yes", "yeah")


def main(args):
    app = App(args)
    return app.run()


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
